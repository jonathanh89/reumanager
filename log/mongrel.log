** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
/Users/jjg/Sites/nsfreu/app/controllers/academic_records_controller.rb:30: warning: else without rescue is useless
/Users/jjg/Sites/nsfreu/app/controllers/academic_records_controller.rb:31: warning: else without rescue is useless
/Users/jjg/Sites/nsfreu/app/controllers/academic_records_controller.rb:31: warning: else without rescue is useless
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
thumbnail_class 
require_or_load 
thumbnailable? 
to_xml 
inspect 
user 
destroy_without_transactions 
instance_variable_names 
table_name_prefix 
__id__ 
user= 
transaction 
logger 
methods 
copy_instance_variables_from 
thumbnail_name_for 
save_with_transactions 
valid_with_callbacks? 
__send__ 
update_attributes 
partial_updates? 
save! 
save_with_dirty 
valid? 
enable_warnings 
from_json 
full_filename 
returning 
readonly! 
require_association 
singleton_methods 
nil? 
table_name_suffix 
valid_without_callbacks? 
before_destroy 
save_without_dirty 
silence_stderr 
random_tempfile_filename 
before_create 
lock_optimistically 
to_yaml_style 
becomes 
rollback_active_record_state! 
protected_methods 
readonly? 
create_or_update_thumbnail 
equal? 
save_without_transactions 
lock! 
attachment_attributes_valid? 
destroy 
after_destroy 
attributes_before_type_cast 
class_eval 
unserializable_attribute? 
create_temp_file 
after_create 
silence_stream 
attachment_options 
load_with_new_constant_marking 
to_yaml_properties 
unserialize_attribute 
private_methods 
send 
metaclass 
pluralize_table_names 
eql? 
attachment_options= 
image? 
save_with_dirty! 
thumbnail_ids 
id 
time_zone_aware_attributes 
destroy_with_callbacks 
attribute_for_inspect 
destroy_thumbnails 
thumbnail_ids= 
with_image 
id= 
save 
thumbnail_resize_options 
save_with_transactions! 
taguri 
update_attribute 
public_methods 
instance_eval 
delete 
with_options 
find_or_initialize_thumbnail 
unloadable 
thumbnail_resize_options= 
taguri= 
type 
default_timezone 
destroy_without_callbacks 
save_without_dirty! 
set_size_from_temp_path 
reload_with_dirty 
connection 
suppress 
save_without_transactions! 
to_yaml 
instance_variables 
instance_exec 
colorize_logging 
validate_on_create 
attribute_present? 
rename_file 
class 
acts_like? 
locking_enabled? 
after_process_attachment 
dclone 
attribute_names 
update_attributes! 
reload_without_dirty 
encode64 
before_update 
attribute_types_cached_by_default 
instance_variable_get 
query_attribute 
validate_on_update 
temp_path 
== 
has_attribute? 
clone 
=== 
partitioned_path 
duplicable? 
destroy_file 
temp_path= 
decode64 
after_update 
html_escape 
require_library_or_gem 
skip_time_zone_conversion_for_attributes 
content_type= 
instance_variable_set 
process_attachment_without_processing 
save_with_validation 
=~ 
callback_with_args 
column_for_attribute 
dup 
attributes 
attachment_path_id 
process_attachment 
[] 
increment! 
[]= 
attributes= 
remove_subclasses_of 
object_id 
process_attachment_with_processing 
decode_b 
respond_to? 
schema_format 
cache_key 
loaded_user? 
changed 
public_filename 
taint 
store_full_sti_class? 
set_user_target 
decrement! 
to_enum 
save_to_storage 
instance_variable_defined? 
respond_to_without_attributes? 
toggle 
filename= 
sanitize_filename 
save_without_validation 
record_timestamps 
build_user 
extend 
subclasses_of 
enum_for 
before_validation 
new_record? 
image_size 
timestamped_migrations 
base_path 
tainted? 
reload 
to_param 
untaint 
current_data 
create_user 
extended_by 
resize_image_or_thumbnail! 
silence_warnings 
toggle! 
from_xml 
after_validation 
instance_of? 
clear_aggregation_cache 
save_with_validation! 
` 
id_before_type_cast 
validate 
to_query 
blank? 
require 
freeze 
belongs_to_before_save_for_user 
extend_with_included_modules_from 
copy_to_temp_file 
resize_image 
b64encode 
before_validation_on_create 
kind_of? 
errors 
debugger 
save_attachment? 
save_without_validation! 
clear_association_cache 
uploaded_data 
store_full_sti_class 
require_dependency 
changed? 
present? 
read_attribute_before_type_cast 
run_callbacks 
uploaded_data= 
write_attribute_without_dirty 
is_a? 
validate_associated_records_for_thumbnails 
after_validation_on_create 
breakpoint 
daemonize 
increment 
method 
read_attribute 
tap 
partial_updates 
configurations 
frozen? 
quoted_id 
to_a 
write_to_temp_file 
primary_key_prefix_type 
destroy_with_transactions 
to_json 
before_save_associated_records_for_thumbnails 
before_validation_on_update 
display 
before_save 
include_root_in_json 
temp_data 
write_attribute 
thumbnails 
to_s 
connection_handler 
with_transaction_returning_status 
instance_values 
temp_data= 
hash 
thumbnails= 
after_validation_on_update 
method_missing 
after_create_or_update_associated_records_for_thumbnails 
decrement 
changes 
after_save 
temp_paths 
thumbnail_class 
require_or_load 
thumbnailable? 
to_xml 
inspect 
user 
destroy_without_transactions 
instance_variable_names 
table_name_prefix 
__id__ 
user= 
transaction 
logger 
methods 
copy_instance_variables_from 
thumbnail_name_for 
save_with_transactions 
valid_with_callbacks? 
__send__ 
update_attributes 
partial_updates? 
save! 
save_with_dirty 
valid? 
enable_warnings 
from_json 
full_filename 
returning 
readonly! 
require_association 
singleton_methods 
nil? 
table_name_suffix 
valid_without_callbacks? 
before_destroy 
save_without_dirty 
silence_stderr 
random_tempfile_filename 
before_create 
lock_optimistically 
to_yaml_style 
becomes 
rollback_active_record_state! 
protected_methods 
readonly? 
create_or_update_thumbnail 
equal? 
save_without_transactions 
lock! 
attachment_attributes_valid? 
destroy 
after_destroy 
attributes_before_type_cast 
class_eval 
unserializable_attribute? 
create_temp_file 
after_create 
silence_stream 
attachment_options 
load_with_new_constant_marking 
to_yaml_properties 
unserialize_attribute 
private_methods 
send 
metaclass 
pluralize_table_names 
eql? 
attachment_options= 
image? 
save_with_dirty! 
thumbnail_ids 
id 
time_zone_aware_attributes 
destroy_with_callbacks 
attribute_for_inspect 
destroy_thumbnails 
thumbnail_ids= 
with_image 
id= 
save 
thumbnail_resize_options 
save_with_transactions! 
taguri 
update_attribute 
public_methods 
instance_eval 
delete 
with_options 
find_or_initialize_thumbnail 
unloadable 
thumbnail_resize_options= 
taguri= 
type 
default_timezone 
destroy_without_callbacks 
save_without_dirty! 
set_size_from_temp_path 
reload_with_dirty 
connection 
suppress 
save_without_transactions! 
to_yaml 
instance_variables 
instance_exec 
colorize_logging 
validate_on_create 
attribute_present? 
rename_file 
class 
acts_like? 
locking_enabled? 
after_process_attachment 
dclone 
attribute_names 
update_attributes! 
reload_without_dirty 
encode64 
before_update 
attribute_types_cached_by_default 
instance_variable_get 
query_attribute 
validate_on_update 
temp_path 
== 
has_attribute? 
clone 
=== 
partitioned_path 
duplicable? 
destroy_file 
temp_path= 
decode64 
after_update 
html_escape 
require_library_or_gem 
skip_time_zone_conversion_for_attributes 
content_type= 
instance_variable_set 
process_attachment_without_processing 
save_with_validation 
=~ 
callback_with_args 
column_for_attribute 
dup 
attributes 
attachment_path_id 
process_attachment 
[] 
increment! 
[]= 
attributes= 
remove_subclasses_of 
object_id 
process_attachment_with_processing 
decode_b 
respond_to? 
schema_format 
cache_key 
loaded_user? 
changed 
public_filename 
taint 
store_full_sti_class? 
set_user_target 
decrement! 
to_enum 
save_to_storage 
instance_variable_defined? 
respond_to_without_attributes? 
toggle 
filename= 
sanitize_filename 
save_without_validation 
record_timestamps 
build_user 
extend 
subclasses_of 
enum_for 
before_validation 
new_record? 
image_size 
timestamped_migrations 
base_path 
tainted? 
reload 
to_param 
untaint 
current_data 
create_user 
extended_by 
resize_image_or_thumbnail! 
silence_warnings 
toggle! 
from_xml 
after_validation 
instance_of? 
clear_aggregation_cache 
save_with_validation! 
` 
id_before_type_cast 
validate 
to_query 
blank? 
require 
freeze 
belongs_to_before_save_for_user 
extend_with_included_modules_from 
copy_to_temp_file 
resize_image 
b64encode 
before_validation_on_create 
kind_of? 
errors 
debugger 
save_attachment? 
save_without_validation! 
clear_association_cache 
uploaded_data 
store_full_sti_class 
require_dependency 
changed? 
present? 
read_attribute_before_type_cast 
run_callbacks 
uploaded_data= 
write_attribute_without_dirty 
is_a? 
validate_associated_records_for_thumbnails 
after_validation_on_create 
breakpoint 
daemonize 
increment 
method 
read_attribute 
tap 
partial_updates 
configurations 
frozen? 
quoted_id 
to_a 
write_to_temp_file 
primary_key_prefix_type 
destroy_with_transactions 
to_json 
before_save_associated_records_for_thumbnails 
before_validation_on_update 
display 
before_save 
include_root_in_json 
temp_data 
write_attribute 
thumbnails 
to_s 
connection_handler 
with_transaction_returning_status 
instance_values 
temp_data= 
hash 
thumbnails= 
after_validation_on_update 
method_missing 
after_create_or_update_associated_records_for_thumbnails 
decrement 
changes 
after_save 
temp_paths 
thumbnail_class<br />
require_or_load<br />
thumbnailable?<br />
to_xml<br />
inspect<br />
user<br />
destroy_without_transactions<br />
instance_variable_names<br />
table_name_prefix<br />
__id__<br />
user=<br />
transaction<br />
logger<br />
methods<br />
copy_instance_variables_from<br />
thumbnail_name_for<br />
save_with_transactions<br />
valid_with_callbacks?<br />
__send__<br />
update_attributes<br />
partial_updates?<br />
save!<br />
save_with_dirty<br />
valid?<br />
enable_warnings<br />
from_json<br />
full_filename<br />
returning<br />
readonly!<br />
require_association<br />
singleton_methods<br />
nil?<br />
table_name_suffix<br />
valid_without_callbacks?<br />
before_destroy<br />
save_without_dirty<br />
silence_stderr<br />
random_tempfile_filename<br />
before_create<br />
lock_optimistically<br />
to_yaml_style<br />
becomes<br />
rollback_active_record_state!<br />
protected_methods<br />
readonly?<br />
create_or_update_thumbnail<br />
equal?<br />
save_without_transactions<br />
lock!<br />
attachment_attributes_valid?<br />
destroy<br />
after_destroy<br />
attributes_before_type_cast<br />
class_eval<br />
unserializable_attribute?<br />
create_temp_file<br />
after_create<br />
silence_stream<br />
attachment_options<br />
load_with_new_constant_marking<br />
to_yaml_properties<br />
unserialize_attribute<br />
private_methods<br />
send<br />
metaclass<br />
pluralize_table_names<br />
eql?<br />
attachment_options=<br />
image?<br />
save_with_dirty!<br />
thumbnail_ids<br />
id<br />
time_zone_aware_attributes<br />
destroy_with_callbacks<br />
attribute_for_inspect<br />
destroy_thumbnails<br />
thumbnail_ids=<br />
with_image<br />
id=<br />
save<br />
thumbnail_resize_options<br />
save_with_transactions!<br />
taguri<br />
update_attribute<br />
public_methods<br />
instance_eval<br />
delete<br />
with_options<br />
find_or_initialize_thumbnail<br />
unloadable<br />
thumbnail_resize_options=<br />
taguri=<br />
type<br />
default_timezone<br />
destroy_without_callbacks<br />
save_without_dirty!<br />
set_size_from_temp_path<br />
reload_with_dirty<br />
connection<br />
suppress<br />
save_without_transactions!<br />
to_yaml<br />
instance_variables<br />
instance_exec<br />
colorize_logging<br />
validate_on_create<br />
attribute_present?<br />
rename_file<br />
class<br />
acts_like?<br />
locking_enabled?<br />
after_process_attachment<br />
dclone<br />
attribute_names<br />
update_attributes!<br />
reload_without_dirty<br />
encode64<br />
before_update<br />
attribute_types_cached_by_default<br />
instance_variable_get<br />
query_attribute<br />
validate_on_update<br />
temp_path<br />
==<br />
has_attribute?<br />
clone<br />
===<br />
partitioned_path<br />
duplicable?<br />
destroy_file<br />
temp_path=<br />
decode64<br />
after_update<br />
html_escape<br />
require_library_or_gem<br />
skip_time_zone_conversion_for_attributes<br />
content_type=<br />
instance_variable_set<br />
process_attachment_without_processing<br />
save_with_validation<br />
=~<br />
callback_with_args<br />
column_for_attribute<br />
dup<br />
attributes<br />
attachment_path_id<br />
process_attachment<br />
[]<br />
increment!<br />
[]=<br />
attributes=<br />
remove_subclasses_of<br />
object_id<br />
process_attachment_with_processing<br />
decode_b<br />
respond_to?<br />
schema_format<br />
cache_key<br />
loaded_user?<br />
changed<br />
public_filename<br />
taint<br />
store_full_sti_class?<br />
set_user_target<br />
decrement!<br />
to_enum<br />
save_to_storage<br />
instance_variable_defined?<br />
respond_to_without_attributes?<br />
toggle<br />
filename=<br />
sanitize_filename<br />
save_without_validation<br />
record_timestamps<br />
build_user<br />
extend<br />
subclasses_of<br />
enum_for<br />
before_validation<br />
new_record?<br />
image_size<br />
timestamped_migrations<br />
base_path<br />
tainted?<br />
reload<br />
to_param<br />
untaint<br />
current_data<br />
create_user<br />
extended_by<br />
resize_image_or_thumbnail!<br />
silence_warnings<br />
toggle!<br />
from_xml<br />
after_validation<br />
instance_of?<br />
clear_aggregation_cache<br />
save_with_validation!<br />
`<br />
id_before_type_cast<br />
validate<br />
to_query<br />
blank?<br />
require<br />
freeze<br />
belongs_to_before_save_for_user<br />
extend_with_included_modules_from<br />
copy_to_temp_file<br />
resize_image<br />
b64encode<br />
before_validation_on_create<br />
kind_of?<br />
errors<br />
debugger<br />
save_attachment?<br />
save_without_validation!<br />
clear_association_cache<br />
uploaded_data<br />
store_full_sti_class<br />
require_dependency<br />
changed?<br />
present?<br />
read_attribute_before_type_cast<br />
run_callbacks<br />
uploaded_data=<br />
write_attribute_without_dirty<br />
is_a?<br />
validate_associated_records_for_thumbnails<br />
after_validation_on_create<br />
breakpoint<br />
daemonize<br />
increment<br />
method<br />
read_attribute<br />
tap<br />
partial_updates<br />
configurations<br />
frozen?<br />
quoted_id<br />
to_a<br />
write_to_temp_file<br />
primary_key_prefix_type<br />
destroy_with_transactions<br />
to_json<br />
before_save_associated_records_for_thumbnails<br />
before_validation_on_update<br />
display<br />
before_save<br />
include_root_in_json<br />
temp_data<br />
write_attribute<br />
thumbnails<br />
to_s<br />
connection_handler<br />
with_transaction_returning_status<br />
instance_values<br />
temp_data=<br />
hash<br />
thumbnails=<br />
after_validation_on_update<br />
method_missing<br />
after_create_or_update_associated_records_for_thumbnails<br />
decrement<br />
changes<br />
after_save<br />
temp_paths<br />
thumbnail_class
require_or_load
thumbnailable?
to_xml
inspect
user
destroy_without_transactions
instance_variable_names
table_name_prefix
__id__
user=
transaction
logger
methods
copy_instance_variables_from
thumbnail_name_for
save_with_transactions
valid_with_callbacks?
__send__
update_attributes
partial_updates?
save!
save_with_dirty
valid?
enable_warnings
from_json
full_filename
returning
readonly!
require_association
singleton_methods
nil?
table_name_suffix
valid_without_callbacks?
before_destroy
save_without_dirty
silence_stderr
random_tempfile_filename
before_create
lock_optimistically
to_yaml_style
becomes
rollback_active_record_state!
protected_methods
readonly?
create_or_update_thumbnail
equal?
save_without_transactions
lock!
attachment_attributes_valid?
destroy
after_destroy
attributes_before_type_cast
class_eval
unserializable_attribute?
create_temp_file
after_create
silence_stream
attachment_options
load_with_new_constant_marking
to_yaml_properties
unserialize_attribute
private_methods
send
metaclass
pluralize_table_names
eql?
attachment_options=
image?
save_with_dirty!
thumbnail_ids
id
time_zone_aware_attributes
destroy_with_callbacks
attribute_for_inspect
destroy_thumbnails
thumbnail_ids=
with_image
id=
save
thumbnail_resize_options
save_with_transactions!
taguri
update_attribute
public_methods
instance_eval
delete
with_options
find_or_initialize_thumbnail
unloadable
thumbnail_resize_options=
taguri=
type
default_timezone
destroy_without_callbacks
save_without_dirty!
set_size_from_temp_path
reload_with_dirty
connection
suppress
save_without_transactions!
to_yaml
instance_variables
instance_exec
colorize_logging
validate_on_create
attribute_present?
rename_file
class
acts_like?
locking_enabled?
after_process_attachment
dclone
attribute_names
update_attributes!
reload_without_dirty
encode64
before_update
attribute_types_cached_by_default
instance_variable_get
query_attribute
validate_on_update
temp_path
==
has_attribute?
clone
===
partitioned_path
duplicable?
destroy_file
temp_path=
decode64
after_update
html_escape
require_library_or_gem
skip_time_zone_conversion_for_attributes
content_type=
instance_variable_set
process_attachment_without_processing
save_with_validation
=~
callback_with_args
column_for_attribute
dup
attributes
attachment_path_id
process_attachment
[]
increment!
[]=
attributes=
remove_subclasses_of
object_id
process_attachment_with_processing
decode_b
respond_to?
schema_format
cache_key
loaded_user?
changed
public_filename
taint
store_full_sti_class?
set_user_target
decrement!
to_enum
save_to_storage
instance_variable_defined?
respond_to_without_attributes?
toggle
filename=
sanitize_filename
save_without_validation
record_timestamps
build_user
extend
subclasses_of
enum_for
before_validation
new_record?
image_size
timestamped_migrations
base_path
tainted?
reload
to_param
untaint
current_data
create_user
extended_by
resize_image_or_thumbnail!
silence_warnings
toggle!
from_xml
after_validation
instance_of?
clear_aggregation_cache
save_with_validation!
`
id_before_type_cast
validate
to_query
blank?
require
freeze
belongs_to_before_save_for_user
extend_with_included_modules_from
copy_to_temp_file
resize_image
b64encode
before_validation_on_create
kind_of?
errors
debugger
save_attachment?
save_without_validation!
clear_association_cache
uploaded_data
store_full_sti_class
require_dependency
changed?
present?
read_attribute_before_type_cast
run_callbacks
uploaded_data=
write_attribute_without_dirty
is_a?
validate_associated_records_for_thumbnails
after_validation_on_create
breakpoint
daemonize
increment
method
read_attribute
tap
partial_updates
configurations
frozen?
quoted_id
to_a
write_to_temp_file
primary_key_prefix_type
destroy_with_transactions
to_json
before_save_associated_records_for_thumbnails
before_validation_on_update
display
before_save
include_root_in_json
temp_data
write_attribute
thumbnails
to_s
connection_handler
with_transaction_returning_status
instance_values
temp_data=
hash
thumbnails=
after_validation_on_update
method_missing
after_create_or_update_associated_records_for_thumbnails
decrement
changes
after_save
temp_paths
thumbnail_class
require_or_load
thumbnailable?
to_xml
inspect
user
destroy_without_transactions
instance_variable_names
table_name_prefix
__id__
user=
transaction
logger
methods
copy_instance_variables_from
thumbnail_name_for
save_with_transactions
valid_with_callbacks?
__send__
update_attributes
partial_updates?
save!
save_with_dirty
valid?
enable_warnings
from_json
full_filename
returning
readonly!
require_association
singleton_methods
nil?
table_name_suffix
valid_without_callbacks?
before_destroy
save_without_dirty
silence_stderr
random_tempfile_filename
before_create
lock_optimistically
to_yaml_style
becomes
rollback_active_record_state!
protected_methods
readonly?
create_or_update_thumbnail
equal?
save_without_transactions
lock!
attachment_attributes_valid?
destroy
after_destroy
attributes_before_type_cast
class_eval
unserializable_attribute?
create_temp_file
after_create
silence_stream
attachment_options
load_with_new_constant_marking
to_yaml_properties
unserialize_attribute
private_methods
send
metaclass
pluralize_table_names
eql?
attachment_options=
image?
save_with_dirty!
thumbnail_ids
id
time_zone_aware_attributes
destroy_with_callbacks
attribute_for_inspect
destroy_thumbnails
thumbnail_ids=
with_image
id=
save
thumbnail_resize_options
save_with_transactions!
taguri
update_attribute
public_methods
instance_eval
delete
with_options
find_or_initialize_thumbnail
unloadable
thumbnail_resize_options=
taguri=
type
default_timezone
destroy_without_callbacks
save_without_dirty!
set_size_from_temp_path
reload_with_dirty
connection
suppress
save_without_transactions!
to_yaml
instance_variables
instance_exec
colorize_logging
validate_on_create
attribute_present?
rename_file
class
acts_like?
locking_enabled?
after_process_attachment
dclone
attribute_names
update_attributes!
reload_without_dirty
encode64
before_update
attribute_types_cached_by_default
instance_variable_get
query_attribute
validate_on_update
temp_path
==
has_attribute?
clone
===
partitioned_path
duplicable?
destroy_file
temp_path=
decode64
after_update
html_escape
require_library_or_gem
skip_time_zone_conversion_for_attributes
content_type=
instance_variable_set
process_attachment_without_processing
save_with_validation
=~
callback_with_args
column_for_attribute
dup
attributes
attachment_path_id
process_attachment
[]
increment!
[]=
attributes=
remove_subclasses_of
object_id
process_attachment_with_processing
decode_b
respond_to?
schema_format
cache_key
loaded_user?
changed
public_filename
taint
store_full_sti_class?
set_user_target
decrement!
to_enum
save_to_storage
instance_variable_defined?
respond_to_without_attributes?
toggle
filename=
sanitize_filename
save_without_validation
record_timestamps
build_user
extend
subclasses_of
enum_for
before_validation
new_record?
image_size
timestamped_migrations
base_path
tainted?
reload
to_param
untaint
current_data
create_user
extended_by
resize_image_or_thumbnail!
silence_warnings
toggle!
from_xml
after_validation
instance_of?
clear_aggregation_cache
save_with_validation!
`
id_before_type_cast
validate
to_query
blank?
require
freeze
belongs_to_before_save_for_user
extend_with_included_modules_from
copy_to_temp_file
resize_image
b64encode
before_validation_on_create
kind_of?
errors
debugger
save_attachment?
save_without_validation!
clear_association_cache
uploaded_data
store_full_sti_class
require_dependency
changed?
present?
read_attribute_before_type_cast
run_callbacks
uploaded_data=
write_attribute_without_dirty
is_a?
validate_associated_records_for_thumbnails
after_validation_on_create
breakpoint
daemonize
increment
method
read_attribute
tap
partial_updates
configurations
frozen?
quoted_id
to_a
write_to_temp_file
primary_key_prefix_type
destroy_with_transactions
to_json
before_save_associated_records_for_thumbnails
before_validation_on_update
display
before_save
include_root_in_json
temp_data
write_attribute
thumbnails
to_s
connection_handler
with_transaction_returning_status
instance_values
temp_data=
hash
thumbnails=
after_validation_on_update
method_missing
after_create_or_update_associated_records_for_thumbnails
decrement
changes
after_save
temp_paths
thumbnail_class  
require_or_load  
thumbnailable?  
to_xml  
inspect  
user  
destroy_without_transactions  
instance_variable_names  
table_name_prefix  
__id__  
user=  
transaction  
logger  
methods  
copy_instance_variables_from  
thumbnail_name_for  
save_with_transactions  
valid_with_callbacks?  
__send__  
update_attributes  
partial_updates?  
save!  
save_with_dirty  
valid?  
enable_warnings  
from_json  
full_filename  
returning  
readonly!  
require_association  
singleton_methods  
nil?  
table_name_suffix  
valid_without_callbacks?  
before_destroy  
save_without_dirty  
silence_stderr  
random_tempfile_filename  
before_create  
lock_optimistically  
to_yaml_style  
becomes  
rollback_active_record_state!  
protected_methods  
readonly?  
create_or_update_thumbnail  
equal?  
save_without_transactions  
lock!  
attachment_attributes_valid?  
destroy  
after_destroy  
attributes_before_type_cast  
class_eval  
unserializable_attribute?  
create_temp_file  
after_create  
silence_stream  
attachment_options  
load_with_new_constant_marking  
to_yaml_properties  
unserialize_attribute  
private_methods  
send  
metaclass  
pluralize_table_names  
eql?  
attachment_options=  
image?  
save_with_dirty!  
thumbnail_ids  
id  
time_zone_aware_attributes  
destroy_with_callbacks  
attribute_for_inspect  
destroy_thumbnails  
thumbnail_ids=  
with_image  
id=  
save  
thumbnail_resize_options  
save_with_transactions!  
taguri  
update_attribute  
public_methods  
instance_eval  
delete  
with_options  
find_or_initialize_thumbnail  
unloadable  
thumbnail_resize_options=  
taguri=  
type  
default_timezone  
destroy_without_callbacks  
save_without_dirty!  
set_size_from_temp_path  
reload_with_dirty  
connection  
suppress  
save_without_transactions!  
to_yaml  
instance_variables  
instance_exec  
colorize_logging  
validate_on_create  
attribute_present?  
rename_file  
class  
acts_like?  
locking_enabled?  
after_process_attachment  
dclone  
attribute_names  
update_attributes!  
reload_without_dirty  
encode64  
before_update  
attribute_types_cached_by_default  
instance_variable_get  
query_attribute  
validate_on_update  
temp_path  
==  
has_attribute?  
clone  
===  
partitioned_path  
duplicable?  
destroy_file  
temp_path=  
decode64  
after_update  
html_escape  
require_library_or_gem  
skip_time_zone_conversion_for_attributes  
content_type=  
instance_variable_set  
process_attachment_without_processing  
save_with_validation  
=~  
callback_with_args  
column_for_attribute  
dup  
attributes  
attachment_path_id  
process_attachment  
[]  
increment!  
[]=  
attributes=  
remove_subclasses_of  
object_id  
process_attachment_with_processing  
decode_b  
respond_to?  
schema_format  
cache_key  
loaded_user?  
changed  
public_filename  
taint  
store_full_sti_class?  
set_user_target  
decrement!  
to_enum  
save_to_storage  
instance_variable_defined?  
respond_to_without_attributes?  
toggle  
filename=  
sanitize_filename  
save_without_validation  
record_timestamps  
build_user  
extend  
subclasses_of  
enum_for  
before_validation  
new_record?  
image_size  
timestamped_migrations  
base_path  
tainted?  
reload  
to_param  
untaint  
current_data  
create_user  
extended_by  
resize_image_or_thumbnail!  
silence_warnings  
toggle!  
from_xml  
after_validation  
instance_of?  
clear_aggregation_cache  
save_with_validation!  
`  
id_before_type_cast  
validate  
to_query  
blank?  
require  
freeze  
belongs_to_before_save_for_user  
extend_with_included_modules_from  
copy_to_temp_file  
resize_image  
b64encode  
before_validation_on_create  
kind_of?  
errors  
debugger  
save_attachment?  
save_without_validation!  
clear_association_cache  
uploaded_data  
store_full_sti_class  
require_dependency  
changed?  
present?  
read_attribute_before_type_cast  
run_callbacks  
uploaded_data=  
write_attribute_without_dirty  
is_a?  
validate_associated_records_for_thumbnails  
after_validation_on_create  
breakpoint  
daemonize  
increment  
method  
read_attribute  
tap  
partial_updates  
configurations  
frozen?  
quoted_id  
to_a  
write_to_temp_file  
primary_key_prefix_type  
destroy_with_transactions  
to_json  
before_save_associated_records_for_thumbnails  
before_validation_on_update  
display  
before_save  
include_root_in_json  
temp_data  
write_attribute  
thumbnails  
to_s  
connection_handler  
with_transaction_returning_status  
instance_values  
temp_data=  
hash  
thumbnails=  
after_validation_on_update  
method_missing  
after_create_or_update_associated_records_for_thumbnails  
decrement  
changes  
after_save  
temp_paths  
thumbnail_class&nbsp;
require_or_load&nbsp;
thumbnailable?&nbsp;
to_xml&nbsp;
inspect&nbsp;
user&nbsp;
destroy_without_transactions&nbsp;
instance_variable_names&nbsp;
table_name_prefix&nbsp;
__id__&nbsp;
user=&nbsp;
transaction&nbsp;
logger&nbsp;
methods&nbsp;
copy_instance_variables_from&nbsp;
thumbnail_name_for&nbsp;
save_with_transactions&nbsp;
valid_with_callbacks?&nbsp;
__send__&nbsp;
update_attributes&nbsp;
partial_updates?&nbsp;
save!&nbsp;
save_with_dirty&nbsp;
valid?&nbsp;
enable_warnings&nbsp;
from_json&nbsp;
full_filename&nbsp;
returning&nbsp;
readonly!&nbsp;
require_association&nbsp;
singleton_methods&nbsp;
nil?&nbsp;
table_name_suffix&nbsp;
valid_without_callbacks?&nbsp;
before_destroy&nbsp;
save_without_dirty&nbsp;
silence_stderr&nbsp;
random_tempfile_filename&nbsp;
before_create&nbsp;
lock_optimistically&nbsp;
to_yaml_style&nbsp;
becomes&nbsp;
rollback_active_record_state!&nbsp;
protected_methods&nbsp;
readonly?&nbsp;
create_or_update_thumbnail&nbsp;
equal?&nbsp;
save_without_transactions&nbsp;
lock!&nbsp;
attachment_attributes_valid?&nbsp;
destroy&nbsp;
after_destroy&nbsp;
attributes_before_type_cast&nbsp;
class_eval&nbsp;
unserializable_attribute?&nbsp;
create_temp_file&nbsp;
after_create&nbsp;
silence_stream&nbsp;
attachment_options&nbsp;
load_with_new_constant_marking&nbsp;
to_yaml_properties&nbsp;
unserialize_attribute&nbsp;
private_methods&nbsp;
send&nbsp;
metaclass&nbsp;
pluralize_table_names&nbsp;
eql?&nbsp;
attachment_options=&nbsp;
image?&nbsp;
save_with_dirty!&nbsp;
thumbnail_ids&nbsp;
id&nbsp;
time_zone_aware_attributes&nbsp;
destroy_with_callbacks&nbsp;
attribute_for_inspect&nbsp;
destroy_thumbnails&nbsp;
thumbnail_ids=&nbsp;
with_image&nbsp;
id=&nbsp;
save&nbsp;
thumbnail_resize_options&nbsp;
save_with_transactions!&nbsp;
taguri&nbsp;
update_attribute&nbsp;
public_methods&nbsp;
instance_eval&nbsp;
delete&nbsp;
with_options&nbsp;
find_or_initialize_thumbnail&nbsp;
unloadable&nbsp;
thumbnail_resize_options=&nbsp;
taguri=&nbsp;
type&nbsp;
default_timezone&nbsp;
destroy_without_callbacks&nbsp;
save_without_dirty!&nbsp;
set_size_from_temp_path&nbsp;
reload_with_dirty&nbsp;
connection&nbsp;
suppress&nbsp;
save_without_transactions!&nbsp;
to_yaml&nbsp;
instance_variables&nbsp;
instance_exec&nbsp;
colorize_logging&nbsp;
validate_on_create&nbsp;
attribute_present?&nbsp;
rename_file&nbsp;
class&nbsp;
acts_like?&nbsp;
locking_enabled?&nbsp;
after_process_attachment&nbsp;
dclone&nbsp;
attribute_names&nbsp;
update_attributes!&nbsp;
reload_without_dirty&nbsp;
encode64&nbsp;
before_update&nbsp;
attribute_types_cached_by_default&nbsp;
instance_variable_get&nbsp;
query_attribute&nbsp;
validate_on_update&nbsp;
temp_path&nbsp;
==&nbsp;
has_attribute?&nbsp;
clone&nbsp;
===&nbsp;
partitioned_path&nbsp;
duplicable?&nbsp;
destroy_file&nbsp;
temp_path=&nbsp;
decode64&nbsp;
after_update&nbsp;
html_escape&nbsp;
require_library_or_gem&nbsp;
skip_time_zone_conversion_for_attributes&nbsp;
content_type=&nbsp;
instance_variable_set&nbsp;
process_attachment_without_processing&nbsp;
save_with_validation&nbsp;
=~&nbsp;
callback_with_args&nbsp;
column_for_attribute&nbsp;
dup&nbsp;
attributes&nbsp;
attachment_path_id&nbsp;
process_attachment&nbsp;
[]&nbsp;
increment!&nbsp;
[]=&nbsp;
attributes=&nbsp;
remove_subclasses_of&nbsp;
object_id&nbsp;
process_attachment_with_processing&nbsp;
decode_b&nbsp;
respond_to?&nbsp;
schema_format&nbsp;
cache_key&nbsp;
loaded_user?&nbsp;
changed&nbsp;
public_filename&nbsp;
taint&nbsp;
store_full_sti_class?&nbsp;
set_user_target&nbsp;
decrement!&nbsp;
to_enum&nbsp;
save_to_storage&nbsp;
instance_variable_defined?&nbsp;
respond_to_without_attributes?&nbsp;
toggle&nbsp;
filename=&nbsp;
sanitize_filename&nbsp;
save_without_validation&nbsp;
record_timestamps&nbsp;
build_user&nbsp;
extend&nbsp;
subclasses_of&nbsp;
enum_for&nbsp;
before_validation&nbsp;
new_record?&nbsp;
image_size&nbsp;
timestamped_migrations&nbsp;
base_path&nbsp;
tainted?&nbsp;
reload&nbsp;
to_param&nbsp;
untaint&nbsp;
current_data&nbsp;
create_user&nbsp;
extended_by&nbsp;
resize_image_or_thumbnail!&nbsp;
silence_warnings&nbsp;
toggle!&nbsp;
from_xml&nbsp;
after_validation&nbsp;
instance_of?&nbsp;
clear_aggregation_cache&nbsp;
save_with_validation!&nbsp;
`&nbsp;
id_before_type_cast&nbsp;
validate&nbsp;
to_query&nbsp;
blank?&nbsp;
require&nbsp;
freeze&nbsp;
belongs_to_before_save_for_user&nbsp;
extend_with_included_modules_from&nbsp;
copy_to_temp_file&nbsp;
resize_image&nbsp;
b64encode&nbsp;
before_validation_on_create&nbsp;
kind_of?&nbsp;
errors&nbsp;
debugger&nbsp;
save_attachment?&nbsp;
save_without_validation!&nbsp;
clear_association_cache&nbsp;
uploaded_data&nbsp;
store_full_sti_class&nbsp;
require_dependency&nbsp;
changed?&nbsp;
present?&nbsp;
read_attribute_before_type_cast&nbsp;
run_callbacks&nbsp;
uploaded_data=&nbsp;
write_attribute_without_dirty&nbsp;
is_a?&nbsp;
validate_associated_records_for_thumbnails&nbsp;
after_validation_on_create&nbsp;
breakpoint&nbsp;
daemonize&nbsp;
increment&nbsp;
method&nbsp;
read_attribute&nbsp;
tap&nbsp;
partial_updates&nbsp;
configurations&nbsp;
frozen?&nbsp;
quoted_id&nbsp;
to_a&nbsp;
write_to_temp_file&nbsp;
primary_key_prefix_type&nbsp;
destroy_with_transactions&nbsp;
to_json&nbsp;
before_save_associated_records_for_thumbnails&nbsp;
before_validation_on_update&nbsp;
display&nbsp;
before_save&nbsp;
include_root_in_json&nbsp;
temp_data&nbsp;
write_attribute&nbsp;
thumbnails&nbsp;
to_s&nbsp;
connection_handler&nbsp;
with_transaction_returning_status&nbsp;
instance_values&nbsp;
temp_data=&nbsp;
hash&nbsp;
thumbnails=&nbsp;
after_validation_on_update&nbsp;
method_missing&nbsp;
after_create_or_update_associated_records_for_thumbnails&nbsp;
decrement&nbsp;
changes&nbsp;
after_save&nbsp;
temp_paths&nbsp;
** USR2 signal received.
** Restarting with arguments:  ruby /opt/local/lib/ruby/gems/1.8/gems/mongrel-1.1.5/bin/mongrel_rails start -d
** Daemonized, any open files are closed.  Look at log/mongrel.pid and log/mongrel.log for info.
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM => stop.  USR2 => restart.  INT => stop (no restart).
** Rails signals registered.  HUP => reload (without restart).  It might not work well.
** Mongrel 1.1.5 available at 0.0.0.0:3000
** Writing PID file to log/mongrel.pid
** TERM signal received.
